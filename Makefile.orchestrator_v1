# Makefile for Orchestrator v1 with real components
# Provides commands for testing, demo, and validation

.PHONY: help install test test-orchestrator-v1 test-real-components demo demo-quick demo-audit clean lint format validate

# Default target
help:
	@echo "Orchestrator v1 - Makefile"
	@echo "=========================="
	@echo ""
	@echo "Available targets:"
	@echo "  install              - Install dependencies"
	@echo "  test                 - Run all tests"
	@echo "  test-orchestrator-v1 - Run Orchestrator v1 tests"
	@echo "  test-real-components - Test real components"
	@echo "  demo                 - Run complete demo"
	@echo "  demo-quick           - Run quick demo"
	@echo "  demo-audit           - Analyze demo results"
	@echo "  clean                - Clean up generated files"
	@echo "  lint                 - Run linting"
	@echo "  format               - Format code"
	@echo "  validate             - Full validation"

# Install dependencies
install:
	@echo "Installing dependencies for Orchestrator v1..."
	pip install -r requirements.txt
	pip install aiohttp pytest-asyncio
	@echo "✅ Dependencies installed"

# Run all tests
test: test-orchestrator-v1 test-real-components
	@echo "✅ All tests completed"

# Test Orchestrator v1
test-orchestrator-v1:
	@echo "Running Orchestrator v1 tests..."
	python -m pytest tests/test_orchestrator_v1.py -v
	@echo "✅ Orchestrator v1 tests completed"

# Test real components
test-real-components:
	@echo "Testing real components..."
	python -m pytest tests/test_real_ae_engine.py -v
	python -m pytest tests/test_real_cegis_engine.py -v
	python -m pytest tests/test_llm_adapter.py -v
	python -m pytest tests/test_verifier.py -v
	python -m pytest tests/test_async_scheduler.py -v
	python -m pytest tests/test_budget_manager.py -v
	@echo "✅ Real components tests completed"

# Run complete demo
demo:
	@echo "Running complete Orchestrator v1 demo..."
	python demo_orchestrator_v1.py
	@echo "✅ Demo completed"

# Run quick demo
demo-quick:
	@echo "Running quick Orchestrator v1 demo..."
	python -c "
import asyncio
from demo_orchestrator_v1 import run_demo
asyncio.run(run_demo())
"
	@echo "✅ Quick demo completed"

# Analyze demo results
demo-audit:
	@echo "Analyzing demo results..."
	@if [ -d "orchestrator_v1_demo_*" ]; then \
		echo "📁 Demo directories found:"; \
		ls -la orchestrator_v1_demo_*; \
		echo ""; \
		echo "📊 Audit packs:"; \
		find orchestrator_v1_demo_* -name "*.json" -exec echo "  {}" \; | head -10; \
		echo ""; \
		echo "📈 Statistics:"; \
		find orchestrator_v1_demo_* -name "metrics.json" -exec cat {} \; | jq . 2>/dev/null || echo "  No metrics found"; \
	else \
		echo "No demo directories found"; \
	fi
	@echo "✅ Demo audit completed"

# Clean up
clean:
	@echo "Cleaning up generated files..."
	rm -rf orchestrator_v1_demo_*
	rm -rf audit/
	rm -rf __pycache__/
	rm -rf .pytest_cache/
	rm -rf *.log
	find . -name "*.pyc" -delete
	find . -name "*.pyo" -delete
	find . -name "*.pyd" -delete
	find . -name ".coverage" -delete
	@echo "✅ Cleanup completed"

# Run linting
lint:
	@echo "Running linting..."
	black --check orchestrator/ tests/ demo_orchestrator_v1.py
	ruff check orchestrator/ tests/ demo_orchestrator_v1.py
	@echo "✅ Linting completed"

# Format code
format:
	@echo "Formatting code..."
	black orchestrator/ tests/ demo_orchestrator_v1.py
	ruff check --fix orchestrator/ tests/ demo_orchestrator_v1.py
	@echo "✅ Code formatted"

# Full validation
validate: install lint test demo
	@echo "✅ Full validation completed"

# Development setup
dev-setup: install
	@echo "Setting up development environment..."
	mkdir -p logs
	mkdir -p audit
	mkdir -p tests/artifacts
	@echo "✅ Development environment ready"

# Run specific test
test-specific:
	@echo "Running specific test: $(TEST)"
	python -m pytest $(TEST) -v

# Run with coverage
test-coverage:
	@echo "Running tests with coverage..."
	python -m pytest tests/ --cov=orchestrator --cov-report=html --cov-report=term
	@echo "✅ Coverage report generated"

# Performance test
test-performance:
	@echo "Running performance tests..."
	python -m pytest tests/test_performance.py -v --durations=10
	@echo "✅ Performance tests completed"

# Integration test
test-integration:
	@echo "Running integration tests..."
	python -m pytest tests/test_integration.py -v
	@echo "✅ Integration tests completed"

# Security test
test-security:
	@echo "Running security tests..."
	python -m pytest tests/test_security.py -v
	@echo "✅ Security tests completed"

# Documentation
docs:
	@echo "Generating documentation..."
	python -c "
import os
os.system('python -m pydoc -w orchestrator.orchestrator_v1')
os.system('python -m pydoc -w orchestrator.engines.real_ae_engine')
os.system('python -m pydoc -w orchestrator.engines.real_cegis_engine')
"
	@echo "✅ Documentation generated"

# Package
package:
	@echo "Creating package..."
	python setup.py sdist bdist_wheel
	@echo "✅ Package created"

# Install package
install-package:
	@echo "Installing package..."
	pip install -e .
	@echo "✅ Package installed"

# Uninstall package
uninstall-package:
	@echo "Uninstalling package..."
	pip uninstall -y orchestrator-v1
	@echo "✅ Package uninstalled"

# Show help
help-detailed:
	@echo "Orchestrator v1 - Detailed Help"
	@echo "=============================="
	@echo ""
	@echo "This Makefile provides commands for working with Orchestrator v1,"
	@echo "which is the industrial version with real components replacing all mocks."
	@echo ""
	@echo "Key Features:"
	@echo "  - Real AE Engine with Next-Closure algorithm"
	@echo "  - Real CEGIS Engine with actual synthesis"
	@echo "  - Real LLM Adapter with concurrent API calls"
	@echo "  - Real Verifier with multiple verification tools"
	@echo "  - Async Scheduler with timeout and cancellation safety"
	@echo "  - Budget Manager with exponential backoff"
	@echo "  - FailReason emission for budget overruns"
	@echo ""
	@echo "Usage Examples:"
	@echo "  make install          # Install all dependencies"
	@echo "  make test             # Run all tests"
	@echo "  make demo             # Run complete demonstration"
	@echo "  make demo-audit       # Analyze demo results"
	@echo "  make validate         # Full validation pipeline"
	@echo ""
	@echo "For more information, see README_ORCHESTRATOR_V1.md"
