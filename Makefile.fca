# Makefile for FCA Next-Closure algorithm
# Provides commands for testing, demo, and validation

.PHONY: help install test test-fca test-next-closure test-ae-engine test-performance demo demo-quick demo-contexts clean lint format validate

# Default target
help:
	@echo "FCA Next-Closure Algorithm - Makefile"
	@echo "===================================="
	@echo ""
	@echo "Available targets:"
	@echo "  install              - Install dependencies"
	@echo "  test                 - Run all tests"
	@echo "  test-fca             - Run FCA tests"
	@echo "  test-next-closure    - Run Next-Closure tests"
	@echo "  test-ae-engine       - Run AE Engine tests"
	@echo "  test-performance     - Run performance tests"
	@echo "  demo                 - Run complete demo"
	@echo "  demo-quick           - Run quick demo"
	@echo "  demo-contexts        - Demo all contexts"
	@echo "  clean                - Clean up generated files"
	@echo "  lint                 - Run linting"
	@echo "  format               - Format code"
	@echo "  validate             - Full validation"

# Install dependencies
install:
	@echo "Installing dependencies for FCA Next-Closure..."
	pip install -r requirements.txt
	pip install pytest pytest-asyncio hypothesis
	@echo "‚úÖ Dependencies installed"

# Run all tests
test: test-fca test-performance
	@echo "‚úÖ All FCA tests completed"

# Test FCA components
test-fca:
	@echo "Running FCA tests..."
	python -m pytest tests/test_fca_next_closure.py -v
	@echo "‚úÖ FCA tests completed"

# Test Next-Closure algorithm
test-next-closure:
	@echo "Testing Next-Closure algorithm..."
	python -m pytest tests/test_fca_next_closure.py::TestNextClosure -v
	@echo "‚úÖ Next-Closure tests completed"

# Test AE Engine
test-ae-engine:
	@echo "Testing AE Engine..."
	python -m pytest tests/test_fca_next_closure.py::TestAEEngine -v
	@echo "‚úÖ AE Engine tests completed"

# Test performance
test-performance:
	@echo "Testing performance..."
	python -m pytest tests/test_fca_next_closure.py::TestPerformance -v
	@echo "‚úÖ Performance tests completed"

# Test lectic order
test-lectic-order:
	@echo "Testing lectic order..."
	python -m pytest tests/test_fca_next_closure.py::TestLecticOrder -v
	@echo "‚úÖ Lectic order tests completed"

# Test closure properties
test-closure:
	@echo "Testing closure properties..."
	python -m pytest tests/test_fca_next_closure.py::TestClosure -v
	@echo "‚úÖ Closure tests completed"

# Test property-based
test-property-based:
	@echo "Testing property-based..."
	python -m pytest tests/test_fca_next_closure.py::TestPropertyBased -v
	@echo "‚úÖ Property-based tests completed"

# Run complete demo
demo:
	@echo "Running complete FCA Next-Closure demo..."
	python demo_fca_next_closure.py
	@echo "‚úÖ Demo completed"

# Run quick demo
demo-quick:
	@echo "Running quick FCA demo..."
	python -c "
from demo_fca_next_closure import create_context_4x4, create_context_5x3
from proofengine.fca.next_closure import NextClosure
import time

print('üöÄ Quick FCA Demo')
print('=' * 30)

# Test 4x4 context
context = create_context_4x4()
start = time.time()
next_closure = NextClosure(context)
concepts = list(next_closure.generate_concepts())
elapsed = time.time() - start

print(f'4√ó4 Context: {len(concepts)} concepts in {elapsed*1000:.2f}ms')

# Test 5x3 context
context = create_context_5x3()
start = time.time()
next_closure = NextClosure(context)
concepts = list(next_closure.generate_concepts())
elapsed = time.time() - start

print(f'5√ó3 Context: {len(concepts)} concepts in {elapsed*1000:.2f}ms')
print('‚úÖ Quick demo completed')
"
	@echo "‚úÖ Quick demo completed"

# Demo all contexts
demo-contexts:
	@echo "Demoing all contexts..."
	python -c "
from demo_fca_next_closure import *
import time

contexts = {
    '4√ó4': create_context_4x4(),
    '5√ó3': create_context_5x3(),
    'Fruits': create_context_fruits()
}

for name, context in contexts.items():
    print(f'\\n{name} Context:')
    start = time.time()
    next_closure = NextClosure(context)
    concepts = list(next_closure.generate_concepts())
    elapsed = time.time() - start
    print(f'  {len(concepts)} concepts in {elapsed*1000:.2f}ms')
"
	@echo "‚úÖ Context demo completed"

# Clean up
clean:
	@echo "Cleaning up generated files..."
	rm -rf __pycache__/
	rm -rf .pytest_cache/
	rm -rf *.log
	find . -name "*.pyc" -delete
	find . -name "*.pyo" -delete
	find . -name "*.pyd" -delete
	find . -name ".coverage" -delete
	@echo "‚úÖ Cleanup completed"

# Run linting
lint:
	@echo "Running linting..."
	black --check proofengine/fca/ tests/test_fca_next_closure.py demo_fca_next_closure.py
	ruff check proofengine/fca/ tests/test_fca_next_closure.py demo_fca_next_closure.py
	@echo "‚úÖ Linting completed"

# Format code
format:
	@echo "Formatting code..."
	black proofengine/fca/ tests/test_fca_next_closure.py demo_fca_next_closure.py
	ruff check --fix proofengine/fca/ tests/test_fca_next_closure.py demo_fca_next_closure.py
	@echo "‚úÖ Code formatted"

# Full validation
validate: install lint test demo
	@echo "‚úÖ Full FCA validation completed"

# Development setup
dev-setup: install
	@echo "Setting up development environment..."
	mkdir -p logs
	mkdir -p fca_results
	@echo "‚úÖ Development environment ready"

# Run specific test
test-specific:
	@echo "Running specific test: $(TEST)"
	python -m pytest $(TEST) -v

# Run with coverage
test-coverage:
	@echo "Running tests with coverage..."
	python -m pytest tests/test_fca_next_closure.py --cov=proofengine.fca --cov-report=html --cov-report=term
	@echo "‚úÖ Coverage report generated"

# Benchmark performance
benchmark:
	@echo "Running FCA benchmark..."
	python -c "
from demo_fca_next_closure import *
import time

print('üèÅ FCA Performance Benchmark')
print('=' * 40)

contexts = {
    '4√ó4': create_context_4x4(),
    '5√ó3': create_context_5x3(),
    'Fruits': create_context_fruits()
}

for name, context in contexts.items():
    print(f'\\n{name} Context:')
    
    # Warm up
    next_closure = NextClosure(context)
    list(next_closure.generate_concepts())
    
    # Benchmark
    times = []
    for _ in range(5):
        start = time.time()
        next_closure = NextClosure(context)
        concepts = list(next_closure.generate_concepts())
        elapsed = time.time() - start
        times.append(elapsed)
    
    avg_time = sum(times) / len(times)
    min_time = min(times)
    max_time = max(times)
    
    print(f'  Concepts: {len(concepts)}')
    print(f'  Average: {avg_time*1000:.2f}ms')
    print(f'  Min: {min_time*1000:.2f}ms')
    print(f'  Max: {max_time*1000:.2f}ms')
    print(f'  Concepts/sec: {len(concepts)/avg_time:.2f}')
"
	@echo "‚úÖ Benchmark completed"

# Show help
help-detailed:
	@echo "FCA Next-Closure Algorithm - Detailed Help"
	@echo "=========================================="
	@echo ""
	@echo "This Makefile provides commands for working with the FCA Next-Closure"
	@echo "algorithm implementation, including tests, demos, and validation."
	@echo ""
	@echo "Key Features:"
	@echo "  - Next-Closure algorithm with lectic order"
	@echo "  - Formal Context structures (Context{G,M,I})"
	@echo "  - Closure operations with idempotence"
	@echo "  - AE Engine with next_step() and statistics"
	@echo "  - Concept lattice operations"
	@echo "  - Performance testing (< 100ms on 5√ó3 context)"
	@echo "  - Property-based testing with hypothesis"
	@echo ""
	@echo "Usage Examples:"
	@echo "  make install          # Install all dependencies"
	@echo "  make test             # Run all tests"
	@echo "  make demo             # Run complete demonstration"
	@echo "  make benchmark        # Run performance benchmark"
	@echo "  make validate         # Full validation pipeline"
	@echo ""
	@echo "Test Categories:"
	@echo "  - Lectic order: Ensures concepts are generated in correct order"
	@echo "  - No duplicates: Verifies no duplicate concepts are generated"
	@echo "  - Closure idempotence: Tests that closure is idempotent"
	@echo "  - Performance: Ensures < 100ms execution on 5√ó3 context"
	@echo "  - Property-based: Tests closure properties with hypothesis"
	@echo ""
	@echo "For more information, see README_FCA.md"
