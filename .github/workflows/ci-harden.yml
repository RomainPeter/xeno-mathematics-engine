name: CI Hardening

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-harden-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Enforce requirements.lock
        run: test -f requirements.lock
      - name: Install tools (locked base + ruff)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.lock
          python -m pip install ruff
      - name: Run ruff
        run: |
          ruff check pefc orchestrator scripts

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Enforce requirements.lock
        run: test -f requirements.lock
      - name: Install tools (locked base + mypy)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.lock
          python -m pip install mypy types-requests types-setuptools
      - name: Run mypy
        run: |
          mypy pefc orchestrator scripts

  bandit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Enforce requirements.lock
        run: test -f requirements.lock
      - name: Install tools (locked base + bandit)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.lock
          python -m pip install bandit
      - name: Run bandit (fail on HIGH)
        run: |
          bandit -r pefc -s HIGH -f json -o bandit-report.json
          bandit -r pefc -s HIGH -f sarif -o bandit-report.sarif
      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: |
            bandit-report.json
            bandit-report.sarif
      - name: Upload SARIF to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-report.sarif

  pip-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Enforce requirements.lock
        run: test -f requirements.lock
      - name: Install tools (locked base + pip-audit)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.lock
          python -m pip install pip-audit
      - name: Run pip-audit (from lock file)
        run: |
          pip-audit -r requirements.lock -f json -o pip-audit.json || true
      - name: Enforce CVSS threshold (fail if >= 7.0, allowlist via env)
        env:
          PIP_AUDIT_IGNORE: ${{ vars.PIP_AUDIT_IGNORE }}
        run: |
          python - << 'PY'
import json, os, sys
ignore = {s.strip() for s in (os.environ.get('PIP_AUDIT_IGNORE') or '').split(',') if s.strip()}
with open('pip-audit.json','r',encoding='utf-8') as f:
    data = json.load(f)
bad = []
for dep in data.get('dependencies', []):
    for adv in dep.get('vulns', []):
        vid = adv.get('id') or ''
        if vid in ignore:
            continue
        # Collect maximum CVSS across aliases/metrics if present
        score = None
        if 'severity' in adv and isinstance(adv['severity'], list):
            for sev in adv['severity']:
                try:
                    s = float(sev.get('score'))
                    score = max(score or s, s)
                except Exception:
                    pass
        # Fallback to advisory-level score
        try:
            s = float(adv.get('score', 0))
            score = max(score or s, s)
        except Exception:
            pass
        if (score or 0) >= 7.0:
            bad.append((vid, score))
if bad:
    print('pip-audit severity threshold failed:', bad)
    sys.exit(3)
print('pip-audit OK (no CVSS >= 7.0 after allowlist)')
PY
      - name: Upload pip-audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit.json

  smoke-integration:
    runs-on: ubuntu-latest
    needs: [ruff, mypy, bandit, pip-audit]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Enforce requirements.lock
        run: test -f requirements.lock
      - name: Install (locked)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.lock
      - name: Hermetic env
        run: |
          echo "TZ=UTC" >> $GITHUB_ENV
          echo "PYTHONHASHSEED=42" >> $GITHUB_ENV
          echo "SOURCE_DATE_EPOCH=1700000000" >> $GITHUB_ENV
      - name: Build pack (no-network)
        env:
          TZ: UTC
          PYTHONHASHSEED: '42'
          SOURCE_DATE_EPOCH: '1700000000'
        run: |
          python -m pefc.pack.cli build --config scripts/pack_inputs.example.json --audit-dir out_ci --seed 42
      - name: Verify pack
        run: |
          python -m pefc.pack.cli verify --run-dir $(ls -td out_ci/r-* | head -n1)
      - name: Run orchestrator lab (no-network)
        env:
          TZ: UTC
          PYTHONHASHSEED: '42'
          SOURCE_DATE_EPOCH: '1700000000'
        run: |
          python -m orchestrator.cli_lab --lab --seed 42 --time-budget 5 --max-iters 5 --hermetic --no-network --audit-dir out_lab
      - name: Upload smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: |
            out_ci/**
            out_lab/**
          if-no-files-found: ignore

