name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        test-type: ["fast", "slow", "all"]
        exclude:
          - python-version: "3.10"
            test-type: "all"
          - python-version: "3.11"
            test-type: "all"
          - python-version: "3.12"
            test-type: "all"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          # Install optional backends for testing
          pip install pandas polars

      - name: Run fast tests
        if: matrix.test-type == "fast"
        run: |
          python -m pytest tests/ -v -m "not slow" --cov=pefc --cov-report=xml --cov-report=term

      - name: Run slow tests
        if: matrix.test-type == "slow"
        run: |
          python -m pytest tests/ -v -m "slow" --cov=pefc --cov-report=xml --cov-report=term

      - name: Run all tests
        if: matrix.test-type == "all"
        run: |
          python -m pytest tests/ -v --cov=pefc --cov-report=xml --cov-report=term --cov-fail-under=80

      - name: Upload coverage to Codecov
        if: matrix.test-type == "all"
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-py${{ matrix.python-version }}-${{ matrix.test-type }}
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-integration:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pandas polars

      - name: Run integration tests
        run: |
          python -m pytest tests/ -v --cov=pefc --cov-report=xml --cov-report=term --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integration
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-integration
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pandas polars

      - name: Run performance tests
        run: |
          python -m pytest tests/ -v -m "performance" --cov=pefc --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-performance
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-security:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install bandit safety

      - name: Run security tests
        run: |
          bandit -r pefc/ -f json -o bandit-report.json
          safety check --json --output safety-report.json

      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: |
            bandit-report.json
            safety-report.json
          if-no-files-found: ignore
          retention-days: 7

  test-compatibility:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pandas polars

      - name: Run compatibility tests
        run: |
          python -m pytest tests/ -v -m "compatibility" --cov=pefc --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-compatibility
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-documentation:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install sphinx sphinx-rtd-theme

      - name: Run documentation tests
        run: |
          python -m pytest tests/ -v -m "documentation" --cov=pefc --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-documentation
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-accessibility:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run accessibility tests
        run: |
          python -m pytest tests/ -v -m "accessibility" --cov=pefc --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-accessibility
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-usability:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run usability tests
        run: |
          python -m pytest tests/ -v -m "usability" --cov=pefc --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-usability
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-maintainability:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run maintainability tests
        run: |
          python -m pytest tests/ -v -m "maintainability" --cov=pefc --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-maintainability
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-reliability:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run reliability tests
        run: |
          python -m pytest tests/ -v -m "reliability" --cov=pefc --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-reliability
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-portability:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run portability tests
        run: |
          python -m pytest tests/ -v -m "portability" --cov=pefc --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-portability
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-efficiency:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run efficiency tests
        run: |
          python -m pytest tests/ -v -m "efficiency" --cov=pefc --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-efficiency
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-modifiability:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run modifiability tests
        run: |
          python -m pytest tests/ -v -m "modifiability" --cov=pefc --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-modifiability
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-testability:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run testability tests
        run: |
          python -m pytest tests/ -v -m "testability" --cov=pefc --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-testability
          path: |
            .coverage
            coverage.xml
            htmlcov/
          if-no-files-found: ignore
          retention-days: 7

  test-coverage:
    runs-on: ubuntu-latest
    needs: [test, test-integration, test-performance, test-security, test-compatibility, test-documentation, test-accessibility, test-usability, test-maintainability, test-reliability, test-portability, test-efficiency, test-modifiability, test-testability]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: coverage-reports/

      - name: Combine coverage reports
        run: |
          python -m coverage combine coverage-reports/*/.coverage
          python -m coverage report --show-missing
          python -m coverage html

      - name: Upload combined coverage
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage
          path: |
            .coverage
            htmlcov/
          if-no-files-found: ignore
          retention-days: 30

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: .coverage
          flags: combined
          name: codecov-umbrella
          fail_ci_if_error: false
