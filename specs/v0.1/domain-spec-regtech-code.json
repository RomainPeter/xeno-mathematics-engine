{
  "version": "0.1.0",
  "id": "regtech-code-v1",
  "domain": "RegTech",
  "closure": "exact",
  "oracle_endpoints": [
    {
      "name": "OPA_Rego",
      "type": "OPA",
      "endpoint": "http://localhost:8181/v1/data",
      "timeout_ms": 5000
    },
    {
      "name": "Static_Analysis",
      "type": "static_analysis", 
      "endpoint": "local://tools/static_analysis",
      "timeout_ms": 10000
    },
    {
      "name": "Property_Tests",
      "type": "property_test",
      "endpoint": "local://tools/hypothesis",
      "timeout_ms": 30000
    }
  ],
  "cost_model": {
    "dimensions": ["time_ms", "audit_cost", "legal_risk", "tech_debt"],
    "units": {
      "time_ms": "milliseconds",
      "audit_cost": "USD",
      "legal_risk": "risk_score_0_1",
      "tech_debt": "debt_score_0_1"
    }
  },
  "admissible_equations": [
    {
      "name": "idempotence_normalize",
      "rule": "□∘□ = □",
      "guard": "K_fixed",
      "proof": "Normalize is idempotent when constraints K are fixed"
    },
    {
      "name": "idempotence_verify", 
      "rule": "№∘№ = №",
      "guard": "proof_validated",
      "proof": "Verify is idempotent after proof validation"
    },
    {
      "name": "idempotence_meet",
      "rule": "∧∘∧ = ∧", 
      "guard": "same_base",
      "proof": "Meet is idempotent on same base"
    },
    {
      "name": "commutation_retrieve_normalize",
      "rule": "Retrieve∘□ ≡ □∘Retrieve",
      "guard": "K_fixed",
      "proof": "Retrieve and Normalize commute when K is fixed"
    },
    {
      "name": "associativity_meet",
      "rule": "∧(∧(A,B),C) = ∧(A,∧(B,C))",
      "guard": "K_fixed", 
      "proof": "Meet is associative when K is fixed"
    }
  ],
  "evidence_types": [
    "CI_logs",
    "policy_proofs", 
    "static_analysis_reports",
    "test_results",
    "compliance_mappings",
    "audit_trails"
  ],
  "shock_ladder": {
    "S1": "Basic compliance: license checks, secret detection, semver validation",
    "S2": "Integration: API change detection, dependency analysis, policy enforcement", 
    "S3": "Stress: chaos testing, adversarial inputs, regulatory scenario simulation"
  },
  "risk_policy": {
    "CVaR_alpha": 0.95,
    "max_risk": 0.8,
    "risk_weights": {
      "time_ms": 0.1,
      "audit_cost": 0.3,
      "legal_risk": 0.4,
      "tech_debt": 0.2
    }
  }
}

